Prelude> 1+2
3
Prelude> (((+) 1) 2)
3
Prelude> :t (+)
(+) :: Num a => a -> a -> a
Prelude> :t (+) 1
(+) 1 :: Num a => a -> a
Prelude> :t (+) (1::Int)
(+) (1::Int) :: Int -> Int
Prelude> :t uncurry (+)
uncurry (+) :: Num c => (c, c) -> c
Prelude> (uncurry (+))(1,2)
3
Prelude> (uncurry (+))(1)

<interactive>:10:1: error:
    • Non type-variable argument in the constraint: Num (c, c)
      (Use FlexibleContexts to permit this)
    • When checking the inferred type
        it :: forall c. (Num (c, c), Num c) => c

Prelude> f a b = a > b
Prelude> :t f
f :: Ord a => a -> a -> Bool
Prelude> f 1 2
False
Prelude> (f 1) 2
False
Prelude> :t uncurry f
uncurry f :: Ord a => (a, a) -> Bool
Prelude> (uncurry f)(1,2)
False
Prelude> (uncurry f)(3,2)
True
Prelude> f a b c = a > b
Prelude> f 1 2 3
False
Prelude> f 1 2 [1..]
False
Prelude> f = \a b c -> a > b
Prelude> f 1 2 3
False
Prelude> f(1,2,3)

<interactive>:23:1: error:
    • No instance for (Show ((t3, t2, t1) -> t0 -> Bool))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
Prelude> f(1)(2)(3)
False
Prelude> ((f(1))(2))(3)
False

Prelude> :t \a b -> a + b
\a b -> a + b :: Num a => a -> a -> a
Prelude> (\a b -> a + b) 1 2
3
Prelude> ((\a b -> a + b) 1) 2
3
Prelude> ((\a -> \b -> a + b) 1) 2
3
Prelude> odd 2
False
Prelude> odd(2)
False
Prelude> :t 5
5 :: Num t => t
Prelude> :t (+)
(+) :: Num a => a -> a -> a
Prelude> 1 + 2::Int
3
Prelude> :t 1 + 2::Int
1 + 2::Int :: Int
Prelude> 1 + 2::Integer
3
Prelude> :t 1 + 2::Integer
1 + 2::Integer :: Integer
Prelude> :t 1 + 2::Float
1 + 2::Float :: Float
Prelude> 1 + 2::Float
3.0
Prelude> 



Prelude> 123
123
Prelude> 0x16
22
Prelude> 0o16
14
Prelude> 0X16
22
Prelude> 0O16
14
Prelude> 0.123
0.123
Prelude> :t True
True :: Bool
Prelude> :t true

:1:1: error:
    • Variable not in scope: true
    • Perhaps you meant data constructor ‘True’ (imported from Prelude)
Prelude> :t True
True :: Bool
Prelude> :t False
False :: Bool
Prelude> true = True
Prelude> :t true
true :: Bool
Prelude> true
True
Prelude> 'a'
'a'
Prelude> :t 'a'
'a' :: Char
Prelude> 'a'+1

:30:1: error:
    • No instance for (Num Char) arising from a use of ‘+’
    • In the expression: 'a' + 1
      In an equation for ‘it’: it = 'a' + 1
Prelude> import Data.Char
Prelude Data.Char> :t ord
ord :: Char -> Int
Prelude Data.Char> ord 'a'
97
Prelude Data.Char> ord 'a' + 1
98
Prelude Data.Char> :t ord 'a' + 1
ord 'a' + 1 :: Int
Prelude Data.Char> "abc"
"abc"
Prelude Data.Char> 'a'
'a'
Prelude Data.Char> "abc"
"abc"
Prelude Data.Char> :t "abc"
"abc" :: [Char]
Prelude> :t 3
3 :: Num t => t
Prelude> :t 3::Int
3::Int :: Int
Prelude> 1+2*3
7
Prelude> :t 1+2*3
1+2*3 :: Num a => a
Prelude> 1+2*3 + 0.1
7.1
Prelude> :t 0.1
0.1 :: Fractional t => t
Prelude> :t 1+2*3 + 0.1
1+2*3 + 0.1 :: Fractional a => a
Prelude> 2 ** 3
8.0
Prelude> :t 2 ** 3
2 ** 3 :: Floating a => a
Prelude> :t truncate 
truncate :: (Integral b, RealFrac a) => a -> b
Prelude> truncate 1.23
1
Prelude> truncate 2 ** 3

:24:1: error:
    • Ambiguous type variable ‘a0’ arising from a use of ‘print’
      prevents the constraint ‘(Show a0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘a0’ should be.
      These potential instances exist:
        instance Show Ordering -- Defined in ‘GHC.Show’
        instance Show Integer -- Defined in ‘GHC.Show’
        instance Show a => Show (Maybe a) -- Defined in ‘GHC.Show’
        ...plus 22 others
        ...plus 12 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In a stmt of an interactive GHCi command: print it
Prelude> truncate (2 ** 3)
8
Prelude> truncate $ 2 ** 3
8
Prelude> []
[]
Prelude> 1:[]
[1]
Prelude> [1,2,3]
[1,2,3]
Prelude> :t (:)
(:) :: a -> [a] -> [a]
Prelude> 1:2:3:[]
[1,2,3]
Prelude> (:) 1 ((:) 2 ((:) 3 []))
[1,2,3]
Prelude> (1,2)
(1,2)
Prelude> :t (1,2)
(1,2) :: (Num t, Num t1) => (t1, t)
Prelude> :t ('a','b')
('a','b') :: (Char, Char)
Prelude> :t ('a',0)
('a',0) :: Num t => (Char, t)
Prelude> :t (0,0.1)
(0,0.1) :: (Num t1, Fractional t) => (t1, t)
Prelude> [1,2,'a']

:68:2: error:
    • No instance for (Num Char) arising from the literal ‘1’
    • In the expression: 1
      In the expression: [1, 2, 'a']
      In an equation for ‘it’: it = [1, 2, 'a']
Prelude> :t [1,2,3]
[1,2,3] :: Num t => [t]
Prelude> :t (,)
(,) :: a -> b -> (a, b)
Prelude> ("abc", 1.234)
("abc",1.234)
Prelude> :t ("abc", 1.234)
("abc", 1.234) :: Fractional t => ([Char], t)
Prelude> ((1,2),(3,4))
((1,2),(3,4))
Prelude> ((1,2),(3,4,5))
((1,2),(3,4,5))
Prelude> [(1,2),(3,4)]
[(1,2),(3,4)]
Prelude> [(1,2),(3,4,5)]

:83:8: error:
    • Couldn't match expected type ‘(t1, t)’
                  with actual type ‘(Integer, Integer, Integer)’
    • In the expression: (3, 4, 5)
      In the expression: [(1, 2), (3, 4, 5)]
      In an equation for ‘it’: it = [(1, 2), (3, 4, 5)]
    • Relevant bindings include
        it :: [(t1, t)] (bound at :83:1)
import Prelude hiding (gcd)

-- gcd(a,0) = a
-- gcd(a,b) = gcd(b, a mod b)

-- gcd a 0 = a
-- gcd a b = gcd b (mod a b)

-- gcd a 0 = a
-- gcd a b = b `gcd` (a `mod` b)

-- gcd a b | b == 0 = a
--         | otherwise = b `gcd` (a `mod` b)

-- gcd a b = if b == 0 then a else b `gcd` (a `mod` b)

-- gcd a b = case b of 0 -> a
--                     _ -> b `gcd` (a `mod` b)

gcd = \a b -> case b of 0 -> a ; _ -> b `gcd` (a `mod` b)






Prelude> []
[]
Prelude> [1,2,3]
[1,2,3]
Prelude> [1,2,3] ++ [4,5,6]
[1,2,3,4,5,6]
Prelude> l = [1,2,3]
Prelude> 0:l
[0,1,2,3]
Prelude> init l
[1,2]
Prelude> init l ++ 4:[last l]
[1,2,4,3]
Prelude> init l ++ 4:drop 2 l
[1,2,4,3]
Prelude> :t "abc"
"abc" :: [Char]
Prelude> ['a', 'b', 'c']
"abc"
Prelude> [1,2,3] == 1:2:3:[]
True
Prelude> [1,2,3] == (:) 1 [2,3]
True
Prelude> [1,3..10]
[1,3,5,7,9]
Prelude> [1,5..100]
[1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97]
Prelude> ['a','c'..'z']
"acegikmoqsuwy"
Prelude> [ x*x | x <- [1..10] ]
[1,4,9,16,25,36,49,64,81,100]
Prelude> [ x*x | x <- [1..10], odd x ]
[1,9,25,49,81]
Prelude> [ (\y -> y*y) x | x <- [1..10]]
[1,4,9,16,25,36,49,64,81,100]
Prelude> map (\y -> y*y) [1..10]
[1,4,9,16,25,36,49,64,81,100]
Prelude> l = "alma"
Prelude> head l
'a'
Prelude> head []
*** Exception: Prelude.head: empty list
Prelude> "alma" !! 2
'm'
Prelude> last "alma"
'a'
Prelude> s = "cool"
Prelude> "super" ++ s
"supercool"
Prelude> s1 = "super" ++ s
Prelude> s1
"supercool"
Prelude> length [1..]
^CInterrupted.
Prelude> [1..9999999999999999999999999999999999999999999999999999999999999999999999999] !! 3
4
Prelude> last [1..9999999999999999999999999999999999999999999999999999999999999999999999999]
^CInterrupted.
Prelude> "alma" ++ "korte"
"almakorte"
Prelude> l = "korte"
Prelude> "alma" ++ l
"almakorte"
Prelude> "cica" ++ l
"cicakorte"
Prelude> :t map
map :: (a -> b) -> [a] -> [b]
Prelude> :t foldr
foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
Prelude> :t filter
filter :: (a -> Bool) -> [a] -> [a]
Prelude> :t fmap
fmap :: Functor f => (a -> b) -> f a -> f b
Prelude> map (\y -> y*y) [1..10]
[1,4,9,16,25,36,49,64,81,100]
Prelude> fmap (\y -> y*y) [1..10]
[1,4,9,16,25,36,49,64,81,100]
Prelude> :t map
map :: (a -> b) -> [a] -> [b]
Prelude> :t fmap
fmap :: Functor f => (a -> b) -> f a -> f b






-- fac 0 = 1
-- fac n = n * fac (n-1)

-- fac 0 = 1
-- fac n | n < 0 = error "fac not defined for negative numbers"
--       | n > 0 = n * fac (n-1)

-- fac 4 => 4 * fac (4-1) => 4 * fac 3 => 4 * (3 * fac (3-1)) => 4 * (3 * fac 2) => ...

fac :: Int -> Int
fac n | n < 0 = error "fac not defined for negative numbers"
      | n == 0 = 1
      | n > 0 = n * fac (n-1)

-- data List a = Nil | Cons a (List a)

head' :: [a] -> a
-- head' (h:t) = h
head' (h:_) = h

--snd' (h:t) = head' t
snd' (_:h:_) = h

init2 (x:y:_) = [x,y]

length' :: [a] -> Int
length' [] = 0
length' (_:t) = 1 + length' t

-- take' 0 l = []
-- take' n [] = []
-- take' n (h:t) = h : take' (n-1) t

take' n l | n <= 0 || null l = []
take' n (h:t) = h : take' (n-1) t

head_length :: [a] -> (a, Int)
-- head_length l = (head' l, length' l)
-- head_length (h:t) = (h, length' t + 1)
-- head_length (h:t) = (h, length' (h:t))
-- head_length l@(h:_) = (h, length' l)

head_length l = (hd, len)
  where hd  = head' l
        len = length' l

-- first_two_same (h:h:_) = True -- non-linear pattern
-- first_two_same _ = False

first_two_same (x:y:_) = x == y






length' :: Eq a => [a] -> Int
length' l
| (l == []) = 0
| otherwise = length' (tail l)

length3 :: [a] -> Int
length3 l
| null l = 0
| otherwise = length3 (tail l)

---------------------------------------------

squares :: Num a => [a] -> [a]
-- squares l = [ n ^ 2 | n <- l ]
squares [] = []
squares (h:t) = h ^ 2 : squares t

inc :: Num a => [a] -> [a]
inc [] = []
inc (h:t) = h + 1 : inc t


-- Int <- típus
-- Integral <- típusosztály
parity :: Integral a => [a] -> [Bool]
parity [] = []
parity (h:t) = even h : parity t

-- Használjunk magasabbrendű függvényeket!
map' :: (a -> b) -> [a] -> [b]
map' _ [] = []
map' f (h:t) = f h : map' f t

-- map' f [a, b, c, d]
-- map' f (a:(b:(c:(d:[])))) ~~~> map' f (a:[...])
-- --> f a : map' f (b:(c:(d:[])))
-- --> f a : (f b : map' f (c:(d:[])))
-- --> f a : (f b : (f c : map' f (d:[]))
-- --> f a : (f b : (f c : (f d : map' f [])))
-- --> f a : (f b : (f c : (f d : [])))
-- --> [f a, f b, f c, f d]

squares' :: Num a => [a] -> [a] 
-- squares' l = map' sq l where
-- sq x = x ^ 2
-- squares' l = map' (\ x -> x ^ 2) l
-- squares' l = map' (^2) l
squares' l = map' (^2) l

-- inc' l = map' (\ x -> x + 1) l
-- inc' l = map' (+1) l
inc' = map' (+1)

-- parity' l = map' even l
parity' = map' even


------------------------------------------------

positives :: (Ord a, Num a) => [a] -> [a]
positives [] = []
positives (h:t) = if h > 0 then h : positives t
else positives t
-- positives (h:t) = let xs = positives t in
-- if h > 0 then h : xs
-- else xs

odds :: Integral a => [a] -> [a]
odds [] = []
odds (h:t) = if odd h then h : odds t
else odds t

odds' :: Integral a => [a] -> [a]
odds' [] = []
odds' (h:t)
| odd h = h : odds' t
| otherwise = odds' t

filter' :: (a -> Bool) -> [a] -> [a]
filter' cond [] = []
filter' cond (h:t) = if cond h then h : filter' cond t
else filter' cond t


-- positives' l = filter' (>0) l
positives' = filter' (\ x -> x > 0)
odds'' = filter' odd


------------------------------------------------------

sum' :: Num a => [a] -> a
sum' [] = 0
sum' (h:t) = h + sum' t

length'' :: [a] -> Int
length'' [] = 0
length'' (_:t) = 1 + length'' t

concat' :: [[a]] -> [a]
concat' [] = []
concat' (h:t) = h ++ concat' t
-- concat' [[1, 2], [3, 4]] --> [1, 2] ++ concat' [[3, 4]]
-- --> [1, 2] ++ ([3, 4] ++ concat' []) -->
-- [1, 2] ++ ([3, 4] ++ [])

-- f :: a -> a -> a
foldr' f [] def = def
foldr' f (h:t) def = f h (foldr' f t def)

sum'' l = foldr' (+) l 0









import Prelude hiding (sum, foldr, length, concat, id, map, filter, foldl)

sum :: [Int] -> Int
sum [] = 0
sum (x:xs) = x + sum xs

{-
sum z [] = z
sum z (x:xs) = x + (sum z xs)

sum f z [] = z
sum f z (x:xs) = x `f` (sum f z xs)

sum (+) 0
-}

-- sum [5,4,3,2,1] = 5 + (4 + (3 + (2 + (1 + 0))))
-- sum [1..5] = 1 + (2 + (3 + (4 + (5 + 0))))

foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f z [] = z
foldr f z (x:xs) = x `f` (foldr f z xs)

sum' :: [Int] -> Int
sum' = foldr (+) 0

-- length [] = 0
-- length (_:xs) = 1 + length xs
length :: [a] -> Int
length = foldr (\_->(+1)) 0

concat :: [[a]] -> [a]
concat = foldr (++) []

id :: [a] -> [a]
id = foldr (:) []

map :: (a -> b) -> [a] -> [b]
map f = foldr (\x v -> (f x) : v) []

filter :: (a -> Bool) -> [a] -> [a]
filter p = foldr (\x v -> if p x then x:v else v) []

foldl :: (b -> a -> b) -> b -> [a] -> b
foldl f z [] = z
foldl f z (x:xs) = foldl f (z `f` x) xs

sum'' = foldl (+) 0
-- sum'' [1..5] = ((((0 + 1) + 2) + 3) + 4) + 5















import Prelude hiding (foldr, foldl, all, reverse)

foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f z [] = z
foldr f z (x:xs) = x `f` (foldr f z xs)

foldl :: (b -> a -> b) -> b -> [a] -> b
foldl f z [] = z
foldl f z (x:xs) = foldl f (z `f` x) xs

-- (&&) b1 b2 = if b1 then b2 else False
-- (&&) True b = b
-- (&&) False _ = False

all p [] = True
-- all p [x] = p x
--all p (x:xs) = if (p x) then all p xs else False
all p (x:xs) = (p x) && (all p xs)

-- all' = foldr (&&) True
-- all' p = foldr (\x a -> p x && a) True
-- all' p = foldr (\x a -> (&&) (p x) a) True
-- all' p = foldr (\x -> (&&)(p(x))) True
-- (.) f g x = f (g x)
-- f . g = \x -> f (g x)
-- (.) f g = \x -> f (g x)
-- all' p = foldr (\x -> (&&)(p(x))) True
-- all' p = foldr (\x -> ((&&) . p) x) True
all' p = foldr ((&&) . p) True

reverse :: [a] -> [a]
reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

-- reverse' = foldl (\xs x -> x:xs) []
-- flip :: (a -> b -> c) -> b -> a -> c
-- reverse' = foldl (flip (:)) []

reverse' l = foldr ((flip (.)) . (:)) id l []

------------------------------------------------------------------------

-- data Bool = False | True
data Sign = Stone | Paper | Scissors deriving (Show)

f :: Sign -> Sign
f Stone = Paper
f Paper = Stone

data IntList = IntNil | IntCons Int IntList
 

Prelude> 1:2:3:[]
[1,2,3]
Prelude> ( (1:) . (2:) . (3:) . id ) []
[1,2,3]
Prelude> ( (1:) . ((2:) . ((3:) . id)) ) []
[1,2,3]
Prelude> ( (1:) . ((2:) . ((3:) . id)) ) [4]
[1,2,3,4]
Prelude> ( (1:) . ((2:) . ((3:) . id)) ) []
[1,2,3]
Prelude> ( ((id . (1:)) . (2:)) . (3:)) []
[1,2,3]
Prelude> (((id . (3:)) . (2:)) . (1:)) []
[3,2,1]
Prelude> ((1:) . ((2:) . ((3:) . id))) []
[1,2,3]
 

Prelude> even (1 + 2 + 3)
True
Prelude> even $ 1 + 2 + 3
True
Prelude> 1 + sum ([1,2] ++ [3,4])
11
Prelude> 1 + sum $ [1,2] ++ [3,4]

<interactive>:30:1: error:
• Non type-variable argument in the constraint: Num ([a] -> a)
(Use FlexibleContexts to permit this)
• When checking the inferred type
it :: forall a. (Num ([a] -> a), Num a) => a
Prelude> sum ([1,2] ++ [3,4])
10
Prelude> sum $ [1,2] ++ [3,4]
10
Prelude> 1 + (sum $ [1,2] ++ [3,4])
11
Prelude> (+) 1 $ sum $ [1,2] ++ [3,4]
11
 

*Main> :t seq
seq :: a -> b -> b
*Main> True && False
False
*Main> False && True
False
*Main> False && last [True, True ..]
False
*Main> last [True, True ..]
^CInterrupted.
*Main> :t all
all :: Foldable t => (a -> Bool) -> t a -> Bool
*Main> all even [1,2,3]
False
*Main> all even [2,4,6]
True
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> :t all'
all' :: [Bool] -> Bool
*Main> all' [True, False ..]
False
*Main> [True, False ..]
[True,False]
*Main> :t cycle
cycle :: [a] -> [a]
*Main> cycle [True,False]
[True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,Interrupted.
*Main> all' (cycle [True,False])
False
*Main> :t all
all :: (t -> Bool) -> [t] -> Bool
*Main> :t foldr ((&&) . even) True
foldr ((&&) . even) True :: Integral a => [a] -> Bool
*Main> foldr ((&&) . even) True [1..10]
False
*Main> foldr ((&&) . (>0)) True [1..10]
True
*Main> foldr (\x -> (&&) (even x)) True [1..10]
False
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> :t any
any :: Foldable t => (a -> Bool) -> t a -> Bool
*Main> 
*Main> 
*Main> reverse [1..10]
[10,9,8,7,6,5,4,3,2,1]
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> :t reverse
reverse :: [a] -> [a]
*Main> foldr (:) [] [1..10]
[1,2,3,4,5,6,7,8,9,10]
*Main> foldl (\xs x -> x:xs) [] [1..10]
[10,9,8,7,6,5,4,3,2,1]
*Main> foldl (\xs x -> x:xs) [] [1..5]
[5,4,3,2,1]
*Main> 5:4:3:2:1:[]
[5,4,3,2,1]
*Main> foldl (\xs x -> []) [] [1..5]
[]
*Main> foldl (\xs x -> xs) [] [1..5]
[]
*Main> foldl (\xs x -> xs) [42] [1..5]
[42]
*Main> foldl (\z x -> z) [42] [1..5]
[42]
*Main> foldl (\xs x -> x:xs) [] [1..5]
[5,4,3,2,1]
*Main> foldl (\z x -> [Bool]) [] [1..5]

<interactive>:53:17: error: Data constructor not in scope: Bool
*Main> foldl (\z x -> [True]) [] [1..5]
[True]
*Main> foldl (\z x -> [True]) [42] [1..5]

<interactive>:55:25: error:
• No instance for (Num Bool) arising from the literal ‘42’
• In the expression: 42
In the second argument of ‘foldl’, namely ‘[42]’
In the expression: foldl (\ z x -> [True]) [42] [1 .. 5]
*Main> :t flip
flip :: (a -> b -> c) -> b -> a -> c
*Main> :t (:)
(:) :: a -> [a] -> [a]
*Main> :t flip (:)
flip (:) :: [a] -> a -> [a]
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> reverse' [1..10]
[10,9,8,7,6,5,4,3,2,1]
*Main> 1:2:3:[]
[1,2,3]
*Main> 3:2:1:[]
[3,2,1]
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> foldr (:) [] [1..10]
[1,2,3,4,5,6,7,8,9,10]
*Main> foldr (\x xs -> x:xs) [] [1..10]
[1,2,3,4,5,6,7,8,9,10]
*Main> foldr (\x f -> f . (x:)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr (\x f -> (x:) . f) id [1..10] []
[1,2,3,4,5,6,7,8,9,10]
*Main> 
*Main> 
*Main> foldr (\x f -> f . (x:)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr (\x f -> (.) f (x:)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr (\x f -> (.) f ((:) x)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr (\x -> (flip (.)) ((:) x)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr ((flip (.)) . (:)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr (flip (.) . (:)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr (\x f -> (.) f ((:) x)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr (\x f -> f . (x:)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> 
*Main> foldr (\x f -> f . (x:)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> foldr ((flip (.)) . (:)) id [1..10] []
[10,9,8,7,6,5,4,3,2,1]
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> reverse' [1..10]
[10,9,8,7,6,5,4,3,2,1]
*Main> :t True
True :: Bool
*Main> :t False
False :: Bool
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> :t Paper
Paper :: Sign
*Main> Paper
Paper
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> f Stone
Paper
*Main> Paper
Paper
*Main> :k Sign
Sign :: *
*Main> :t [Paper]
[Paper] :: [Sign]
*Main> :t []
[] :: [t]
*Main> :t (:)
(:) :: a -> [a] -> [a]
*Main> :t (:) Paper []
(:) Paper [] :: [Sign]
*Main> Paper < Stone

<interactive>:109:1: error:
• No instance for (Ord Sign) arising from a use of ‘<’
• In the expression: Paper < Stone
In an equation for ‘it’: it = Paper < Stone
*Main> Paper == Stone

<interactive>:110:1: error:
• No instance for (Eq Sign) arising from a use of ‘==’
• In the expression: Paper == Stone
In an equation for ‘it’: it = Paper == Stone
*Main> :r
[1 of 1] Compiling Main ( code.hs, interpreted )
Ok, modules loaded: Main.
*Main> :t IntNil
IntNil :: IntList
*Main> :t IntCons
IntCons :: Int -> IntList -> IntList
*Main> IntCons 1 IntNil

<interactive>:114:1: error:
• No instance for (Show IntList) arising from a use of ‘print’
• In a stmt of an interactive GHCi command: print it
*Main>



data Bool = False | True
data IntList = Nil | Cons Int IntList
data List a = Nil | Cons a (List a)
 

data Point = Point Int Int deriving (Show)
incX :: Point -> Point
incX (Point x y) = Point (x+1) y
 

data Point = Point { x :: Int, y :: Int } deriving (Show)
incX :: Point -> Point
-- incX (Point x0 y0) = Point { x = x0 + 1, y = y0 }
incX p@(Point { x = x0 }) = p { x = x0 + 1 }
 

data IntList = Nil | Cons Int IntList

--showIntList :: IntList -> String
--showIntList Nil = "[]"
--showIntList (Cons x xs) = "[" ++ show x ++ "|" ++ showIntList xs ++ "]"

--instance Show IntList where
-- show = showIntList

instance Show IntList where
show Nil = "[]"
show (Cons x xs) = "[" ++ show x ++ "|" ++ show xs ++ "]"
 

--data IntTree = IEmpty | INode IntTree Int IntTree deriving (Show)

data Tree a = Empty | Node (Tree a) a (Tree a) deriving (Show)
type IntTree = Tree Int
-- type String = [Char]

--instance Show (Tree a) where
-- show Empty = "empty"
-- show (Node _ _ _) = "node"

--instance Eq (Tree a) where
-- Empty == Empty = True
-- Node _ _ _ == Node _ _ _ = False

-- mapTree f Empty = Empty
-- mapTree f (Node l x r) = Node (mapTree f l) (f x) (mapTree f r)

instance Functor Tree where
fmap f Empty = Empty
fmap f (Node l x r) = Node (fmap f l) (f x) (fmap f r)

-- sumIntTree :: IntTree -> Int
-- sumIntTree Empty = 0
-- sumIntTree (Node l x r) = sumIntTree l + (x + sumIntTree r)

sumIntTree :: Int -> IntTree -> Int
sumIntTree z Empty = z
sumIntTree z (Node l x r) = (sumIntTree (x + sumIntTree z r) l)

instance Foldable Tree where
foldr f z Empty = z
foldr f z (Node l x r) = foldr f (x `f` (foldr f z r)) l





import Control.Monad

main = do putStrLn "Hello"
          s <- getLine
          return ()
          when (s == "foo") (putStrLn s)

maybeToEitherUnit :: Maybe a -> Either () a
maybeToEitherUnit Nothing = Left ()
maybeToEitherUnit (Just x) = Right x

eitherUnitToMaybe :: Either () a -> Maybe a
eitherUnitToMaybe (Left ()) = Nothing
eitherUnitToMaybe (Right x) = Just x

pairWithBoolToEither :: (Bool,a) -> (Either a a)
--pairWithBoolToEither (b, x) = if b then Left x else Right x
pairWithBoolToEither (False, x) = Left x
pairWithBoolToEither (True, x) = Right x

eitherToPairWithBool :: Either a a -> (Bool,a)
eitherToPairWithBool (Left x) = (False, x)
eitherToPairWithBool (Right x) = (True, x)

functionFromBoolToPair :: (Bool -> a) -> (a,a)
functionFromBoolToPair f = ((f True), (f False))

pairToFunctionFromBool :: (a,a) -> (Bool -> a)
--pairToFunctionFromBool (x,y) = \b -> if b then x else y
pairToFunctionFromBool (x,_) True = x
pairToFunctionFromBool (_,y) False = y
 

*Main> :t Left
Left :: a -> Either a b
*Main> :t Left 42
Left 42 :: Num a => Either a b
*Main> :t (Left 42 :: Either Int Int)
(Left 42 :: Either Int Int) :: Either Int Int
*Main> pairWithBoolToEither $ eitherToPairWithBool $ (Left 42)
Left 42
*Main> (Just (+5)) <*> (Just 5)
Just 10
*Main> (Just (+5)) <*> Nothing
Nothing
*Main> Nothing <*> (Just 5)
Nothing
*Main> :t putStrLn
putStrLn :: String -> IO ()
*Main> "Hello world"
"Hello world"
*Main> putStrLn "Hello world"
Hello world
*Main> :t putStrLn
putStrLn :: String -> IO ()
*Main> :t getLine
getLine :: IO String
*Main> putStrLn $ "alma"++['.']
alma.
*Main> getLine
alma
"alma"
*Main> putStrLn . getLine

<interactive>:37:12: error:
• Couldn't match expected type ‘a -> String’
with actual type ‘IO String’
• In the second argument of ‘(.)’, namely ‘getLine’
In the expression: putStrLn . getLine
In an equation for ‘it’: it = putStrLn . getLine
• Relevant bindings include
it :: a -> IO () (bound at <interactive>:37:1)
*Main> :t getLine 
getLine :: IO String
*Main> :t putStrLn
putStrLn :: String -> IO ()
*Main> getLine >>= putStrLn
alma
alma
*Main> getLine >>= putStrLn >>= putStrLn

<interactive>:41:26: error:
• Couldn't match type ‘()’ with ‘[Char]’
Expected type: () -> IO ()
Actual type: String -> IO ()
• In the second argument of ‘(>>=)’, namely ‘putStrLn’
In the expression: getLine >>= putStrLn >>= putStrLn
In an equation for ‘it’: it = getLine >>= putStrLn >>= putStrLn
*Main> :t return
return :: Monad m => a -> m a
*Main> :t sequence
sequence :: (Monad m, Traversable t) => t (m a) -> m (t a)
*Main> sequence [putStrLn "alma", putStrLn "korte"]
alma
korte
[(),()]




